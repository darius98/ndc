# This is the configuration file for the NDC service. The NDC executable expects to find this file
# in /etc/ndc/ndc.conf by default. This can be changed by setting the environment variable
# NDC_CONF_FILE to point to any other location with an NDC configuration file. Items that can be
# configured in this file are generally low-level knobs and implementation details of the NDC
# executable that should provide sensible defaults. For configuring more high level properties such
# as ports and TLS certificates, the executable provides a command line interface as well.

# Where to log access information. Special values stdout, stderr, null represent logging to standard
# output, standard error and not logging at all, respectively.
logging.access_log = stdout

# Where to log general server information (errors, warnings etc.). Special values stdout, stderr,
# null represent logging to standard output, standard error and not logging at all, respectively.
logging.server_log = stderr

# The minimum log level for which to display server messages. The supported levels, in order, are
# debug, info, warning, error and fatal. Note that there is also a build flag for controlling which
# log instructions end up in the executable. For example, if the executable was built with
# -DNDC_LOG_LEVEL=2, info level log messages will not appear even if this setting is info.
logging.min_level = debug

# Display the file name and line number of the log messages. Note that there is also a build flag
# for controlling whether this information is built into the executable. If the executable was built
# without -DNDC_LOG_FILE_AND_LINE, file names and line numbers will not appear even if this setting
# is true.
logging.filename_and_lineno = true

# Configuration of the hash table of memory-mapped files cache.
file_cache.num_buckets = 23
file_cache.bucket_initial_capacity = 4

# Maximum number of pending TCP connections. See the documentation for the listen(2) system call.
# This value is passed as the second argument to that system call when initializing the TCP server.
tcp_server.backlog = 2048

# Maximum number of read events to be processed by the server in one batch. Increasing this number
# will reduce the number of system calls in case of high load, therefore increasing connection
# accept/read performance, but might starve other threads.
tcp_server.events_batch_size = 2048

# The size of the buffer allocated for each TCP connection. Note that some space (<100B) is used for
# connection metadata and a NULL terminator. It is highly recommended for this value to be a
# multiple of the page size (4KB on most systems).
tcp_server.connection_buffer_size = 65536

# Path to a PEM file containing a TLS certificate. Pass "none" for no TLS on TCP connections. This
# file should contain both the certificate and the private key.
tcp_server.tls_cert_pem = none

# Maximum number of write events to be processed by the TCP server in one batch. Increasing this
# number will reduce the number of system calls in case of high load, therefore increasing
# connection write performance (and throughput), but might starve other threads (for example, might
# delay accepting new connections).
tcp_write_loop.events_batch_size = 2048

# The number of request processing worker threads. Note that two more threads are always present
# (the TCP read and the write event loops).
http.num_workers = 1

# The size of the buffer allocated for each HTTP request. Beware that requests larger than this will
# lead to disconnecting the TCP client (no nice errors).
http.request_buffer_size = 65536
