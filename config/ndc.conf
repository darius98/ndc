# The minimum log level for which to display messages. The levels are 0 for debug, 1 for info,
# 2 for warning, 3 for error and 4 for fatal. Note that there is also a build flag for controlling
# which log instructions end up in the executable. For example, if the executable was built with
# -DNDC_LOG_LEVEL=2, debug and info level log messages will not appear even if this setting is 0.
# The default value is 0.
logging.min_level = 0

# Display the file name and line number of the log messages. Note that there is also a build flag
# for controlling whether this information is built into the executable. If the executable was built
# without -DNDC_LOG_FILE_AND_LINE, file names and line numbers will not appear even if this setting
# is true.
logging.filename_and_lineno = true

# Configuration of the hash table of memory-mapped files cache.
file_cache.num_buckets = 23
file_cache.bucket_initial_capacity = 4

# Maximum number of pending TCP connections. See the documentation for the listen(2) system call.
# This value is passed as the second argument to that system call when initializing the TCP server.
tcp_server.backlog = 2048

# Maximum number of read events to be processed by the server in one batch. Increasing this number
# will reduce the number of system calls in case of high load, therefore increasing connection
# accept/read performance, but might starve other threads.
tcp_server.events_batch_size = 2048

# Configuration items for the hash table of TCP connections.
tcp_server.num_buckets = 23
tcp_server.bucket_initial_capacity = 4

# The size of the buffer allocated for each TCP connection.
tcp_server.connection_buffer_size = 65536

# Configuration items for the hash table of write tasks queued for each connection. The size of this
# table will be about the same as the table of TCP connections in the TCP server.
tcp_write_queue.num_buckets = 23
tcp_write_queue.bucket_initial_capacity = 4

# Maximum number of write events to be processed by the TCP server in one batch. Increasing this
# number will reduce the number of system calls in case of high load, therefore increasing
# connection write performance (and throughput), but might starve other threads (for example, might
# delay accepting new connections).
tcp_write_queue.events_batch_size = 2048

# The number of request processing worker threads. Note that two more threads are always present
# (the TCP read and the write event loops).
http.num_workers = 1

# The size of the buffer allocated for each HTTP request. Beware that requests larger than this will
# lead to disconnecting the TCP client (no nice errors).
http.request_buffer_size = 65536
